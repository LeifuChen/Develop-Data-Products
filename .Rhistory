+     barplot(1:x),
+     x = slider(5, 25, initial = 10))
manipulate(barplot(1:x), x = slider(5, 10))
manipulate(plot(1:x), x = slider(5, 10))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install("rChart")
install.package("rCharts")
install.packages("rCharts")
library("rCharts")
library(rCharts)
install("shiny")
install.packages("shiny")
libray(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
library(shiny)
shinyServer(
function(input, output) {
}
)
runApp()
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
quit
exit
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
View(training)
View(testing)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
require(e1071)
install.packages("e1071")
library("e1071")
modelFit <- train(type ~.,data=training, method="glm")
warnings()
modelFit
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
?lm
fit<-lm(y~x);
fit
summary(fit)
data(mtcars)
lm(mpg~wt,data=mtcars)
fit <- lm(mpg~wt,data=mtcars)
summary(fit)
summary(mtcars$wt)
-5.3445*3.217+37.2851
20.09184-0.5591
20.09184-1.96*0.5591
20.09184+1.96*0.5591
?mtcars
-5.3445*3+37.2851
21.2516+c(-1,1)*0.5591
21.2516+c(-1.96,1.96)*0.5591
21.2516+c(-1.965,1.965)*0.5591
sumCoef <- summary(fit)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
head(sumCoef)
fit$df
nrow(mtcars)
sumCoef[1,1]+c(-1,1)*qt(.975,32)*sumCoef[1,2]
sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,32)*sumCoef[2,2]
sumCoef[2,1]+c(-1,1)*qt(.975,31)*sumCoef[2,2]
sumCoef[2,1]*3+c(-1,1)*qt(.975,32)*sumCoef[2,2]
sumCoef[2,1]*3+c(-1,1)*qt(.975,32)*sumCoef[2,2]+37.2851
sumCoef[2,1]*3+c(-1,1)*qt(.975,31)*sumCoef[2,2]+37.2851
fit
sumCoef[2,1]*3+c(-1,1)*qt(.975,30)*sumCoef[2,2]+37.2851
newdata <- data.frame(x=wt)
p1 <- predict(fit,mtcars$wt,interval=("confidence"))
p1 <- predict(mtcars$mpg,mtcars$wt,interval=("confidence"))
x<-mtcars$wt
y<-mtcars$mpg
M<-mean(x)
fit<-lm(y~x)
predict(fit,newdata=data.frame(x=M),interval="confidence")
mean(x=3)
summary(x=3)
summary(mean(x=3))
mewdata<-data.frame(wt=3)
predict(fit,newdata,interval=("preidct"))
predict(fit,newdata,interval=("predict"))
predict(fit,mewdata,interval=("predict"))
data(mtcars)
fit <- lm(mpg~wt,data=mtcars)
newdata<-data.frame(wt=3.00)
predict(fit,newdata,interval=("predict"))
newdata<-data.frame(wt=2.00)
predict(fit,newdata,interval=("predict"))
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,30)*sumCoef[2,2]
0.5*sumCoef[2,1]+c(-1,1)*qt(.975,30)*sumCoef[2,2]
2*sumCoef[2,1]+c(-1,1)*qt(.975,30)*sumCoef[2,2]
2*(sumCoef[2,1]+c(-1,1)*qt(.975,30)*sumCoef[2,2])
fit <- lm(y~x)
fit
summary(fit)
summary(fit)$sigma
data(mtcars)
x<-mtcars$wt+3
y<-mtcars$mpg
fit <- lm(y~x)
fit
37.285-3*(-5.344)
lm(y)
x<-mtcars$wt
fit < lm(y~x)
fit <- lm(y~x)
fit1 <- lm(y~x-1)
fit
summary(fit)$sigma
summary(fit1)$sigma
summary(fit)$sigma/summary(fit1)$sigma
fit <- lm(y-1~x)
summary(fit)$sigma/summary(fit1)$sigma
fit
mean(y)
(y-mean(y))^2
sum((y-mean(y))^2)
sum((y-37.285-5.344*x)^2)
sum((y-37.285+5.344*x)^2)
1126.047/278.322
278.322/1126.047
library("AppliedPredictiveModeling", lib.loc="D:/R/R-3.1.0/library")
data(concrete)
library(caret)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[ inTrain,]
testing <- mixtures[-inTrain,]
cutcrete<-cut2(training$CompressiveStrength, g=3)
library("Hmisc", lib.loc="D:/R/R-3.1.0/library")
cutcrete<-cut2(training$CompressiveStrength, g=4)
head(cutcrete)
head(testing)
plot(rownames(testing),cutcrete)
plot(rownames(training),cutcrete)
?plot
training$CompressiveStrength<-cut2(training$CompressiveStrength, g=4)
head(testing)
head(training)
library("ggplot2")
data(Wage)
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
head(training)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
library(caret)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
library(caret)
library(ISLR)
library(ggplot2)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
cutWage <- cut2(training$wage,g=3)
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
training$CompressiveStrength<-cut2(training$CompressiveStrength, g=4)
index <- rownames(training)
qplot(index, training$CompressiveStrength, color=training$Water)
qplot(index, training$CompressiveStrength, color=training$Water,fill=index,geom=c("boxplot"))
qplot(index, training$CompressiveStrength, color=training$Water,geom=c("boxplot"))
qplot(index, training$CompressiveStrength, color=training$Age)
qplot(training$CompressiveStrength, index, color=training$Water,geom=c("boxplot"))
head(index)
index <- c(1:744)
head(index)
qplot(training$CompressiveStrength, index, color=training$Water,geom=c("boxplot"))
index <- c(1:774)
qplot(training$CompressiveStrength, index, color=training$Water,geom=c("boxplot"))
length(index)
head(training)
head(index)
tail(index)
qplot(x=training$CompressiveStrength, y=index, color=training$Water,geom=c("boxplot"))
qplot(y=training$CompressiveStrength, x=index, color=training$Water,geom=c("boxplot"))
training$Cement <- index
head(training)
qplot(y=CopressiveStrength, x=Cement, data=training, color=Water)
qplot(y=CompressiveStrength, x=Cement, data=training, color=Water)
qplot(y=CompressiveStrength, x=Cement, data=training, color=CompressiveStrength)
qplot(y=CompressiveStrength, x=Cement, data=training, color=FlyAsh)
qplot(y=CompressiveStrength, x=Cement, data=training, color=Age)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
cutC<- cut2(training$ComparessiveStrength,g=3)
cutC<- cut2(training$ComparessiveStrength,g=4)
cutC<- cut2(training$CompressiveStrength,g=4)
qplot(y=CompressiveStrength, x=nrow(training), data=training, color=cutC)
head(nrow(training)ï¼‰
head(nrow(training))
qplot(y=training$CompressiveStrength, x=nrow(training), color=training$cutC)
index(training)
qplot(y=training$CompressiveStrength, x=c(1:nrow(training)), color=training$cutC)
qplot(y=training$CompressiveStrength, x=c(1:nrow(training)), col=training$cutC)
View(training)
View(training)
qplot(y=training$CompressiveStrength, x=c(1:nrow(training)), col=training$Age)
qplot(y=training$CompressiveStrength, x=c(1:nrow(training)), col=training$FlyAsh)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
head(Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a <- which(grepl("^IL|diagnosis", colnames(training), ignore.case = F))
df <- training[,a]
b <- prcomp(df[,-1])
summary(b)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4, list=FALSE)
training <- adData[inTrain,]
a <- which(grepl("^IL|diagnosis", colnames(training), ignore.case = F))
df <- training[,a]
b <- prcomp(df[,-1])
summary(b)
preProc <- preProcess(training[,c(58:69)], method="pca", thresh=0.9)
preProc
testing = adData[-inTrain,]
preProc <- preProcess(training[,c(58:69)], method="pca", thresh=0.8)
preProc
modelFit <- train(training$type -., method="glm",data=trainPC)
g1 <- train(training$diagnosis~., data=a, method="glm")
preProc <- preProcess(subTrain[,c(58:69)], method="pca", thresh=0.8)
subTrain<- which(grepl("^IL|diagnosis", colnames(training), ignore.case = F))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subTrain<- which(grepl("^IL|diagnosis", colnames(training), ignore.case = F))
df <- training[,a]
b <- prcomp(df[,-1])
preProc <- preProcess(subTrain[,c(58:69)], method="pca", thresh=0.8)
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
df <- training[,subTrain]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subTrain<- which(grepl("^IL|diagnosis", colnames(training), ignore.case = F))
df <- training[,subTrain]
b <- prcomp(df[,-1])
preProc <- preProcess(subTrain[,c(58:69)], method="pca", thresh=0.8)
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subTrain<- which(grepl("^IL|diagnosis", colnames(training), ignore.case = F))
df <- training[,subTrain]
b <- prcomp(df[,-1])
preProc <- preProcess(subTrain, method="pca", thresh=0.8)
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
data(mtcars)
head(mtcars)
lm(mpg~as.factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl)+wt,data=mtcars)
factor(mtcars$cyl)
data(mtcar)
data(mtcars)
head(mtcars)
lm(mpg~cyl,data=mtcars)
lm(mpg~factor(cyl),data=mtcars)
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl)+wt-1,data=mtcars)
summary(lm(mpg~factor(cyl)+wt,data=mtcars))
library(rgl)
install.packages(rgl)
install.packages("rgl")
library(rgl)
plot3d(factor(cyl),wt,mpa,data=mtcars)
plot3d(factor(mtcars$cyl),mtcars$wt,mtcars$mpa)
plot3d(factor(mtcars$cyl),mtcars$wt,mtcars$mpg)
mtcars
mtcars(mtcars$cyl=4)
mtcars(mtcars$cyl==4)
mtcars[mtcars$cyl==4]
mtcars$cyl==4
mtcars[mtcars$cyl==4,]
mtcars[mtcars$cyl==8,]
mean(mtcars[mtcars$cyl==8,])
mean(mtcars[mtcars$cyl==8,]$cyl==8)
mean(mtcars[mtcars$cyl==8,]$cyl)
mean(mtcars[mtcars$cyl==8,]$mtg)
mean(mtcars[mtcars$cyl==8,]$mpg)
mean(mtcars[mtcars$cyl==4,]$mpg)
lm(mtg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl)+wt*cyl,data=mtcars)
lm(mpg~factor(cyl)+wt+wt*cyl,data=mtcars)
summary(lm(mpg~factor(cyl)+wt*cyl,data=mtcars))
summary(lm(mpg~factor(cyl)+wt+wt*cyl,data=mtcars))
summary(lm(mpg~factor(cyl)+wt,data=mtcars))
fit1<-lm(mpg~factor(cyl)+wt,data=mtcars)
fit2<-lm(mpg~factor(cyl)+wt+wt*cyl,data=mtcars)
anova(fit1,fit2)
fit2<-lm(mpg~factor(cyl)+wt+wt*factor(cyl),data=mtcars)
anova(fit1,fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ factor(cyl)+ey, data = mtcars)
lm(mpg ~ factor(cyl)+wt, data = mtcars)
?mtcars
head(mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
hatvalues(fit)
which.max(hatvalues(fit))
dfetas(fit)
dfbetas(fit)
setwd("E:/Data Science/Programming Language/R/Coursera/Develop Data Products")
library(shiny)
))
)
)
mainPanel(
),
)
))
library(shiny)
shinyUI(pageWithSidebar(headerPanel("Data science FTW!")))
h3('Sidebar text')
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runExample("01_hello")
runApp()
runApp()
runApp("App-1",display.mode="showcase")
setwd("E:/Data Science/Programming Language/R/Coursera/Develop Data Products")
runApp("App-1",display.mode="showcase")
runApp("",display.mode="showcase")
runApp("App-1",display.mode="showcase")
runApp()
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
data(diamond)
data(diamonds)
head(diamonds)
runApp("App-1")
runApp("App-1")
runApp("App-1")
data(mtcars)
?mtcars
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
install.packages(shinyapps)
install.packages("shinyapps")
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='wargamer1988', token='37B99FAE3F8B53324FD4310C8DBE91DF', secret='tMB1WpLraW4hcrEgoYwZMrNRbpsxZbnzSB5MN47M')
helpText('2.Click the column header to sort a column.'),
)
runApp("App-1")
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
runApp("App-1")
deployApp("App-1")
library(slidify)
pwd
getpwd()
pwd()
setwd("E:/Data Science/Programming Language/R/Coursera/Develop Data Products")
author("wargamer1988")
subtitle    :
slidify("index.RMD")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
